[target.thumbv7em-none-eabi]
# uncomment this to make `cargo run` execute programs on QEMU
runner = "qemu-system-arm -cpu cortex-m3 -machine lm3s6965evb -nographic -semihosting-config enable=on,target=native -kernel"

[target.'cfg(all(target_arch = "arm", target_os = "none"))']
# uncomment ONE of these three option to make `cargo run` start a GDB session
# which option to pick depends on your system
# runner = "arm-none-eabi-gdb -q -x openocd.gdb"
# runner = "gdb-multiarch -q -x openocd.gdb"
# runner = "gdb -q -x openocd.gdb"

rustflags = [
  # This is needed if your flash or ram addresses are not aligned to 0x10000 in memory.x
  # See https://github.com/rust-embedded/cortex-m-quickstart/pull/95
  #"-C", "link-arg=--nmagic",

  # LLD (shipped with the Rust toolchain) is used as the default linker
  #"-C", "link-arg=-Tlink.x",

  # if you run into problems with LLD switch to the GNU linker by commenting out
  # this line
  #"-C", "linker=arm-none-eabi-ld",

  # if you need to link to pre-compiled C libraries provided by a C toolchain
  # use GCC as the linker by commenting out both lines above and then
  # uncommenting the three lines below
  "-C", "linker=arm-none-eabi-gcc",
  #"-C", "link-arg=-Wl,-T,memory.x",
  "-C", "link-arg=-Wl,-T,asb_svl_linker.ld",
  "-C", "link-arg=-nostartfiles",
  "-C", "link-arg=-Wl,--gc-sections,--entry,Reset_Handler,-Map,target/sby.map",
  "-C", "link-arg=-Wl,--start-group",
  "-C", "link-arg=-Wl,--end-group",

  #"-C", "link-arg=-lm",
  #"-C", "link-arg=-lgcc",

]

[build]
target = "thumbv7em-none-eabihf"     # Cortex-M4F and Cortex-M7F (with FPU)

